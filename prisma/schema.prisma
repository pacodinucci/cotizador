generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Zone {
  id         String       @id @default(uuid())
  code       String       @unique
  title      String
  zone       String
  smallZone  Boolean
  mainZone   Boolean
  price      Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  order      Int?
  ComboZones ComboZones[]
}

model Combo {
  id         String       @id @default(uuid())
  title      String
  price      Int
  smallZones Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ComboZones ComboZones[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  phone         String?
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Directions {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  name      String
}

model Appointment {
  id                String           @id
  zones             String[]
  date              DateTime
  hour              String
  duration          Int
  customerId        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  professionalId    String?
  isCanceled        Boolean          @default(false)
  treatmentId       String
  Customer          Customer?        @relation(fields: [customerId], references: [id])
  Professional      Professional?    @relation(fields: [professionalId], references: [id])
  Treatment         Treatment        @relation(fields: [treatmentId], references: [id])
  Calendar          Calendar[]
  clinicalHistoryId String? // ðŸ‘ˆ relaciÃ³n opcional
  ClinicalHistory   ClinicalHistory? @relation("HistoryAppointments", fields: [clinicalHistoryId], references: [id])
}

model Calendar {
  id             String        @id
  date           DateTime
  hour           String
  treatment      String
  status         String        @default("reserved")
  appointmentId  String
  professionalId String?
  customerId     String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  Appointment    Appointment   @relation(fields: [appointmentId], references: [id])
  Customer       Customer      @relation(fields: [customerId], references: [id])
  Professional   Professional? @relation(fields: [professionalId], references: [id])

  @@unique([date, hour, professionalId])
}

model Chat {
  id        String    @id
  number    String
  status    String?
  createdAt DateTime  @default(now())
  Message   Message[]
}

model Customer {
  id                    String            @id @default(uuid())
  name                  String
  phone                 String
  email                 String
  nickname              String?
  dni                   String?
  gender                String?
  birthDate             DateTime?
  profession            String?
  address               String?
  province              String?
  neighborhood          String?
  city                  String?
  nationality           String?
  approach              String?
  approachContact       String?
  medicalCoverage       String?
  medicalCoveragePlan   String?
  medicalCoverageNumber String?
  createdAt             DateTime          @default(now())
  Appointment           Appointment[]
  Calendar              Calendar[]
  ClinicalHistory       ClinicalHistory[]
}

model Message {
  id        String   @id
  number    String
  content   String
  role      String
  createdAt DateTime @default(now())
  chatId    String
  Chat      Chat     @relation(fields: [chatId], references: [id])
}

model Professional {
  id          String        @id
  name        String
  specialty   String?
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Appointment Appointment[]
  Calendar    Calendar[]
}

model Treatment {
  id              String        @id @default(uuid())
  name            String        @unique
  description     String?
  requiresConsult Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  modules         Int?
  Appointment     Appointment[]
}

model ClinicalHistory {
  id             String             @id @default(uuid())
  customerId     String
  customer       Customer           @relation(fields: [customerId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  medicalRecords MedicalRecord[]
  documents      ClinicalDocument[]
  appointments   Appointment[]      @relation("HistoryAppointments")
}

model MedicalRecord {
  id                String          @id @default(uuid())
  clinicalHistoryId String
  description       String
  date              DateTime        @default(now())
  ClinicalHistory   ClinicalHistory @relation(fields: [clinicalHistoryId], references: [id], onDelete: Cascade)
}

model ClinicalDocument {
  id                String          @id @default(uuid())
  clinicalHistoryId String
  name              String
  fileUrl           String
  uploadedAt        DateTime        @default(now())
  ClinicalHistory   ClinicalHistory @relation(fields: [clinicalHistoryId], references: [id], onDelete: Cascade)
}

model ComboZones {
  A     String
  B     String
  Combo Combo  @relation(fields: [A], references: [id], onDelete: Cascade)
  Zone  Zone   @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_ComboZones_AB_pkey")
  @@index([B], map: "_ComboZones_B_index")
  @@map("_ComboZones")
}

enum UserRole {
  ADMIN
  USER
}
